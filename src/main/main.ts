import { BrowserWindow, app, shell } from 'electron';
import { setupServices, tearDownServices } from './ipc-listeners';

import isDev from 'electron-is-dev';
import path from 'path';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const PROJECT_OPENER_WEBPACK_ENTRY: string;
declare const PROJECT_OPENER_PRELOAD_WEBPACK_ENTRY: string;

const gotTheLock = app.requestSingleInstanceLock();

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup') || !gotTheLock) {
    app.quit();
}

const createWindow = (): void => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        title: 'project-opener',
        width: 1300,
        height: 800,
        icon: path.join(__dirname, 'logo.ico'),
        webPreferences: {
            preload: PROJECT_OPENER_PRELOAD_WEBPACK_ENTRY,
        },
        frame: false,
        resizable: false,
        movable: true,
        fullscreenable: false,
    });

    // and load the index.html of the app.
    mainWindow.loadURL(PROJECT_OPENER_WEBPACK_ENTRY);

    // Open the DevTools.
    !!isDev && mainWindow.webContents.openDevTools();

    mainWindow.webContents.setWindowOpenHandler(({ url }) => {
        shell.openExternal(url);
        return { action: 'deny' };
    });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
    setupServices();
    createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

app.on('quit', () => {
    tearDownServices();
});
